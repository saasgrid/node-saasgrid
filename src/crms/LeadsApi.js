/**
 * Saasgrids CRM grid
 * Saasgrids CRM grid
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@saasgrids.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/Lead'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/Lead'));
  } else {
    // Browser globals (root is window)
    if (!root.crms) {
      root.crms = {};
    }
    root.crms.LeadsApi = factory(root.crms.ApiClient, root.crms.InlineResponse2001, root.crms.InlineResponse2002, root.crms.Lead);
  }
}(this, function(ApiClient, InlineResponse2001, InlineResponse2002, Lead) {
  'use strict';

  /**
   * Leads service.
   * @module crms/LeadsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LeadsApi. 
   * @alias module:crms/LeadsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a new lead
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Lead} body Lead object that needs to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lead} and HTTP response
     */
    this.createLeadWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createLead");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLead");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Lead;

      return this.apiClient.callApi(
        '/{userId}/leads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new lead
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Lead} body Lead object that needs to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lead}
     */
    this.createLead = function(userId, body) {
      return this.createLeadWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete lead by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteLeadByIdWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteLeadById");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/leads/{leadId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete lead by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteLeadById = function(userId) {
      return this.deleteLeadByIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all leads
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} email Email id of the lead
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.getAllLeadsWithHttpInfo = function(userId, email) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAllLeads");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getAllLeads");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'email': email
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/{userId}/leads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all leads
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} email Email id of the lead
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.getAllLeads = function(userId, email) {
      return this.getAllLeadsWithHttpInfo(userId, email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get lead by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} leadId ObjectId of lead
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Lead} and HTTP response
     */
    this.getLeadByIdWithHttpInfo = function(userId, leadId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getLeadById");
      }

      // verify the required parameter 'leadId' is set
      if (leadId === undefined || leadId === null) {
        throw new Error("Missing the required parameter 'leadId' when calling getLeadById");
      }


      var pathParams = {
        'userId': userId,
        'leadId': leadId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Lead;

      return this.apiClient.callApi(
        '/{userId}/leads/{leadId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get lead by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} leadId ObjectId of lead
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Lead}
     */
    this.getLeadById = function(userId, leadId) {
      return this.getLeadByIdWithHttpInfo(userId, leadId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all lead filters
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.getLeadFiltersWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getLeadFilters");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/{userId}/leads/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all lead filters
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.getLeadFilters = function(userId) {
      return this.getLeadFiltersWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all leads by filter
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} filterId ObjectId of  filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    this.getLeadsByFilterWithHttpInfo = function(userId, filterId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getLeadsByFilter");
      }

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling getLeadsByFilter");
      }


      var pathParams = {
        'userId': userId,
        'filterId': filterId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/{userId}/leads/filters/{filterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all leads by filter
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} filterId ObjectId of  filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    this.getLeadsByFilter = function(userId, filterId) {
      return this.getLeadsByFilterWithHttpInfo(userId, filterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update lead by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Lead} body Lead object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateLeadByIdWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateLeadById");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLeadById");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/leads/{leadId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update lead by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Lead} body Lead object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateLeadById = function(userId, body) {
      return this.updateLeadByIdWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
