/**
 * Saasgrids CRM grid
 * Saasgrids CRM grid
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@saasgrids.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Contact', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2006'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Contact'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse2006'));
  } else {
    // Browser globals (root is window)
    if (!root.crms) {
      root.crms = {};
    }
    root.crms.ContactsApi = factory(root.crms.ApiClient, root.crms.Contact, root.crms.InlineResponse2003, root.crms.InlineResponse2004, root.crms.InlineResponse2005, root.crms.InlineResponse2006);
  }
}(this, function(ApiClient, Contact, InlineResponse2003, InlineResponse2004, InlineResponse2005, InlineResponse2006) {
  'use strict';

  /**
   * Contacts service.
   * @module crms/ContactsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ContactsApi. 
   * @alias module:crms/ContactsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a new contact
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Contact} body Contact object that needs to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Contact} and HTTP response
     */
    this.createContactWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createContact");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createContact");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/{userId}/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new contact
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Contact} body Contact object that needs to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Contact}
     */
    this.createContact = function(userId, body) {
      return this.createContactWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete contact by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteContactByIdWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteContactById");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/contacts/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete contact by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteContactById = function(userId) {
      return this.deleteContactByIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all contacts by filter
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} filterId ObjectId of  filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Number of records to be fetched
     * @param {String} opts.skip Skip value got from previous request, can be empty for first request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    this.getContactByFilterWithHttpInfo = function(userId, filterId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContactByFilter");
      }

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling getContactByFilter");
      }


      var pathParams = {
        'userId': userId,
        'filterId': filterId
      };
      var queryParams = {
        'limit': opts['limit'],
        'skip': opts['skip']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/{userId}/contacts/filters/{filterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all contacts by filter
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} filterId ObjectId of  filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Number of records to be fetched
     * @param {String} opts.skip Skip value got from previous request, can be empty for first request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    this.getContactByFilter = function(userId, filterId, opts) {
      return this.getContactByFilterWithHttpInfo(userId, filterId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get contact by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} contactId ObjectId of contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Contact} and HTTP response
     */
    this.getContactByIdWithHttpInfo = function(userId, contactId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContactById");
      }

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactById");
      }


      var pathParams = {
        'userId': userId,
        'contactId': contactId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/{userId}/contacts/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get contact by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} contactId ObjectId of contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Contact}
     */
    this.getContactById = function(userId, contactId) {
      return this.getContactByIdWithHttpInfo(userId, contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all contact filters
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Number of records to be fetched
     * @param {String} opts.skip Skip value got from previous request, can be empty for first request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    this.getContactFiltersWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContactFilters");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'limit': opts['limit'],
        'skip': opts['skip']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/{userId}/contacts/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all contact filters
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit Number of records to be fetched
     * @param {String} opts.skip Skip value got from previous request, can be empty for first request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    this.getContactFilters = function(userId, opts) {
      return this.getContactFiltersWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all contact properties
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    this.getContactPropertiesWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContactProperties");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/{userId}/contacts/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all contact properties
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    this.getContactProperties = function(userId) {
      return this.getContactPropertiesWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get contacts
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {Array.<String>} contactId ObjectIds of contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    this.getContactsWithHttpInfo = function(userId, contactId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContacts");
      }

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContacts");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'contactId': this.apiClient.buildCollectionParam(contactId, 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/{userId}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get contacts
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {Array.<String>} contactId ObjectIds of contact
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    this.getContacts = function(userId, contactId) {
      return this.getContactsWithHttpInfo(userId, contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all contacts by email
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} email Email id of the contacts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Contact} and HTTP response
     */
    this.getContactsByEmailWithHttpInfo = function(userId, email) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContactsByEmail");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getContactsByEmail");
      }


      var pathParams = {
        'userId': userId,
        'email': email
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/{userId}/contacts/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all contacts by email
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} email Email id of the contacts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Contact}
     */
    this.getContactsByEmail = function(userId, email) {
      return this.getContactsByEmailWithHttpInfo(userId, email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update contact by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} contactId ObjectId of contact to be updated
     * @param {module:model/Contact} body Contact object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateContactByIdWithHttpInfo = function(userId, contactId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateContactById");
      }

      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling updateContactById");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContactById");
      }


      var pathParams = {
        'userId': userId,
        'contactId': contactId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/contacts/{contactId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update contact by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} contactId ObjectId of contact to be updated
     * @param {module:model/Contact} body Contact object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateContactById = function(userId, contactId, body) {
      return this.updateContactByIdWithHttpInfo(userId, contactId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
