/**
 * Saasgrids CRM grid
 * Saasgrids CRM grid
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@saasgrids.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/InlineResponse2002', 'model/InlineResponse2007'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/InlineResponse2002'), require('../model/InlineResponse2007'));
  } else {
    // Browser globals (root is window)
    if (!root.crms) {
      root.crms = {};
    }
    root.crms.AccountsApi = factory(root.crms.ApiClient, root.crms.Account, root.crms.InlineResponse2002, root.crms.InlineResponse2007);
  }
}(this, function(ApiClient, Account, InlineResponse2002, InlineResponse2007) {
  'use strict';

  /**
   * Accounts service.
   * @module crms/AccountsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AccountsApi. 
   * @alias module:crms/AccountsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a new account
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Account} body Account object that needs to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createAccountWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createAccount");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAccount");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new account
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Account} body Account object that needs to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createAccount = function(userId, body) {
      return this.createAccountWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete account by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAccountByIdWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteAccountById");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/account/{accountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete account by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAccountById = function(userId) {
      return this.deleteAccountByIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get account by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} accountId ObjectId of acount
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Account} and HTTP response
     */
    this.getAccountByIdWithHttpInfo = function(userId, accountId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAccountById");
      }

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountById");
      }


      var pathParams = {
        'userId': userId,
        'accountId': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/{userId}/account/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get account by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} accountId ObjectId of acount
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Account}
     */
    this.getAccountById = function(userId, accountId) {
      return this.getAccountByIdWithHttpInfo(userId, accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all account filters
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    this.getAccountFiltersWithHttpInfo = function(userId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAccountFilters");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/{userId}/accounts/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all account filters
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
     */
    this.getAccountFilters = function(userId) {
      return this.getAccountFiltersWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all accounts by filter
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} filterId ObjectId of  filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    this.getAccountsByFilterWithHttpInfo = function(userId, filterId) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAccountsByFilter");
      }

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling getAccountsByFilter");
      }


      var pathParams = {
        'userId': userId,
        'filterId': filterId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/{userId}/accounts/filters/{filterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all accounts by filter
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} filterId ObjectId of  filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    this.getAccountsByFilter = function(userId, filterId) {
      return this.getAccountsByFilterWithHttpInfo(userId, filterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all accounts
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} email Email id of the account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    this.getAllAccountsWithHttpInfo = function(userId, email) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAllAccounts");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getAllAccounts");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'email': email
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/{userId}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all accounts
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {String} email Email id of the account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    this.getAllAccounts = function(userId, email) {
      return this.getAllAccountsWithHttpInfo(userId, email)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update account by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Account} body Account object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateAccountByIdWithHttpInfo = function(userId, body) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateAccountById");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccountById");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{userId}/account/{accountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update account by Id
     * 
     * @param {String} userId User instance id returned from saasgrids after authorization
     * @param {module:model/Account} body Account object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateAccountById = function(userId, body) {
      return this.updateAccountByIdWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
